### Example config for 2d optimization from single observations.
# The only things that need to be changed for a
# typical experiment are:
# 1. parnames, lb and ub under [common]
# 2. n_trials under init_strat
# 3. n_trials under opt_strat

## The common section includes global server parameters and parameters
## reused in multiple other classes
[common]
parnames = [R, B] # names of the parameters
lb = [0, 0] # lower bounds of the parameters, in the same order as above
ub = [1, 1] # upper bounds of parameter, in the same order as above
outcome_type = single_probit # currently this is always single_probit (standard "1IFC" in psychophysics)

strategy_names = [init_strat, opt_strat] # The strategies that will be used, corresponding to the named sections below

# Configuration for the initialization strategy, which we use to gather initial points
# before we start doing model-based acquisition
[init_strat]
n_trials = 8 # number of sobol trials to run
# The generator class used to generate new parameter values
generator = SobolGenerator

# Configuration for the optimization strategy, our model-based acquisition
[opt_strat]
# number of model-based trials to run
n_trials = 12

# On every trial, AEPsych can either initialize model hyperparameters randomly and refit
# from scratch, or initialize them to the previous model's parameters. This governs
# how often the former happens vs the latter. Using the previous model's parameters is often faster
# (leading to less waiting between trials) but occasional refitting is useful for avoiding local minima
# in hyperparameters, especially early in the experiment.
refit_every = 5
# The generator class used to generate new parameter values
generator = OptimizeAcqfGenerator


##############################################################################
## Advanced options
###############################################################################
## The experiment section covers the main components of the experiment:
## the model used for the modeling part, and the acquisition function
[experiment]
# Acquisition function: the objective we use to decide where to sample next. We recommend
# MonotonicMCLSE for threshold finding, MonotonicMCPosteriorVariance for global exploration,
# qNoisyExpectedImprovement for optimization. For other options, check out the botorch and
# aepsych docs
acqf = qNoisyExpectedImprovement
# The model used as part of the modelbridge. MonotonicRejectionGP or MonotonicRejectionGPLSETS
# are the options for monotonic, otherwise GPClassificationModel.
model = GPClassificationModel
# The generator class used to generate new parameter values
generator = OptimizeAcqfGenerator

## GPClassificationModel model settings.
[GPClassificationModel]
# Number of inducing points for approximate inference. 100 is fine for 2d and overkill for 1d;
# for larger dimensions, scale this up.
inducing_size = 100
# A "factory" function (defined in aepsych) that builds the GP mean and covariance.
# other options are monotonic_mean_covar_factory (for use with MonotonicRejectionGenerator) and
# song_mean_covar_factory (for the linear-additive model of some previous work).
mean_covar_factory = default_mean_covar_factory

## OptimizeAcqfGenerator model settings.
[OptimizeAcqfGenerator]
# number of restarts for acquisition function optimization.
restarts = 10
# number of samples for quasi-random initialization of the acquisition function optimizer
samps = 1000
